import{_ as a,o as n,c as l,L as o}from"./chunks/framework.9fa19bf9.js";const i=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"column/Electron/index.md"}'),p={name:"column/Electron/index.md"};function e(t,s,r,c,y,D){return n(),l("div",null,s[0]||(s[0]=[o(`<ul><li><h2 id="项目-electron-vue3-ts" tabindex="-1">项目：electron+vue3+ts <a class="header-anchor" href="#项目-electron-vue3-ts" aria-label="Permalink to &quot;项目：electron+vue3+ts&quot;">​</a></h2></li><li><h3 id="项目背景-客户的wms系统是安装在终端机上-需要把h5页面挂载到客户端上-实现客户操作。electron刚好可以解决这个问题-而且学习成本不高。并且使用了neginx-实现静态文件服务-实现h5页面挂载到客户端端-客户在内网即可使用" tabindex="-1">项目背景：客户的WMS系统是安装在终端机上，需要把h5页面挂载到客户端上，实现客户操作。electron刚好可以解决这个问题，而且学习成本不高。并且使用了neginx 实现静态文件服务，实现h5页面挂载到客户端端，客户在内网即可使用 <a class="header-anchor" href="#项目背景-客户的wms系统是安装在终端机上-需要把h5页面挂载到客户端上-实现客户操作。electron刚好可以解决这个问题-而且学习成本不高。并且使用了neginx-实现静态文件服务-实现h5页面挂载到客户端端-客户在内网即可使用" aria-label="Permalink to &quot;项目背景：客户的WMS系统是安装在终端机上，需要把h5页面挂载到客户端上，实现客户操作。electron刚好可以解决这个问题，而且学习成本不高。并且使用了neginx 实现静态文件服务，实现h5页面挂载到客户端端，客户在内网即可使用&quot;">​</a></h3></li></ul><h3 id="_1-electron框架如何实现把h5页面挂载到客户端" tabindex="-1">1.electron框架如何实现把h5页面挂载到客户端？ <a class="header-anchor" href="#_1-electron框架如何实现把h5页面挂载到客户端" aria-label="Permalink to &quot;1.electron框架如何实现把h5页面挂载到客户端？&quot;">​</a></h3><ul><li><h2 id="实现原理" tabindex="-1">实现原理 <a class="header-anchor" href="#实现原理" aria-label="Permalink to &quot;实现原理&quot;">​</a></h2><p>Electron通过<strong>主进程</strong>创建窗口，并在<strong>渲染进程</strong>中加载H5页面，同时支持：</p><ul><li>Chromium内核渲染网页</li><li>Node.js访问系统API</li><li>跨进程通信（IPC）</li></ul><hr><h2 id="具体实现步骤" tabindex="-1">具体实现步骤 <a class="header-anchor" href="#具体实现步骤" aria-label="Permalink to &quot;具体实现步骤&quot;">​</a></h2><h3 id="方案一-加载本地html文件-win-loadfile-src-index-html" tabindex="-1">方案一：加载本地HTML文件 win.loadFile(&#39;src/index.html&#39;) <a class="header-anchor" href="#方案一-加载本地html文件-win-loadfile-src-index-html" aria-label="Permalink to &quot;方案一：加载本地HTML文件 win.loadFile(&#39;src/index.html&#39;)&quot;">​</a></h3><p>javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.js（主进程）</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> app</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> BrowserWindow </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">function</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">createWindow</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">win</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1200</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    height</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    webPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      nodeIntegration</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">// 启用Node.js集成</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// 加载本地文件</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">src/index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">) </span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">whenReady</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(createWindow)</span></span></code></pre></div><h3 id="方案二-加载远程url-win-loadurl-https-your-web-app-domain-com" tabindex="-1">方案二：加载远程URL win.loadURL(&#39;<a href="https://your-web-app-domain.com" target="_blank" rel="noreferrer">https://your-web-app-domain.com</a>&#39;) <a class="header-anchor" href="#方案二-加载远程url-win-loadurl-https-your-web-app-domain-com" aria-label="Permalink to &quot;方案二：加载远程URL win.loadURL(&#39;https://your-web-app-domain.com&#39;)&quot;">​</a></h3><p>javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 主进程修改加载方式</span></span>
<span class="line"><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadURL</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://your-web-app-domain.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 需要处理跨域问题时</span></span>
<span class="line"><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">webContents</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">session</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">webRequest</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">onHeadersReceived</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">details</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">callback</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    responseHeaders</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">...</span><span style="color:#BABED8;">details</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">responseHeaders</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">Access-Control-Allow-Origin</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">]</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><hr><h2 id="核心配置项" tabindex="-1">核心配置项 <a class="header-anchor" href="#核心配置项" aria-label="Permalink to &quot;核心配置项&quot;">​</a></h2><h3 id="_1-窗口配置参数" tabindex="-1">1. 窗口配置参数 <a class="header-anchor" href="#_1-窗口配置参数" aria-label="Permalink to &quot;1. 窗口配置参数&quot;">​</a></h3><table><thead><tr><th style="text-align:center;">参数</th><th style="text-align:center;">说明</th><th style="text-align:center;">示例值</th></tr></thead><tbody><tr><td style="text-align:center;"><code>width</code></td><td style="text-align:center;">窗口宽度</td><td style="text-align:center;"><code>1200</code></td></tr><tr><td style="text-align:center;"><code>height</code></td><td style="text-align:center;">窗口高度</td><td style="text-align:center;"><code>800</code></td></tr><tr><td style="text-align:center;"><code>frame</code></td><td style="text-align:center;">是否显示边框</td><td style="text-align:center;"><code>false</code></td></tr><tr><td style="text-align:center;"><code>transparent</code></td><td style="text-align:center;">窗口透明</td><td style="text-align:center;"><code>true</code></td></tr></tbody></table><h3 id="_2-安全配置建议" tabindex="-1">2. 安全配置建议 <a class="header-anchor" href="#_2-安全配置建议" aria-label="Permalink to &quot;2. 安全配置建议&quot;">​</a></h3><p>javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">webPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">contextIsolation</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">  </span><span style="color:#676E95;font-style:italic;">// 启用上下文隔离</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">sandbox</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;">           </span><span style="color:#676E95;font-style:italic;">// 启用沙箱模式</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">preload</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#BABED8;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">preload.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)  </span><span style="color:#676E95;font-style:italic;">// 预加载脚本</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><hr><h2 id="打包部署" tabindex="-1">打包部署 <a class="header-anchor" href="#打包部署" aria-label="Permalink to &quot;打包部署&quot;">​</a></h2><h3 id="使用electron-builder" tabindex="-1">使用electron-builder <a class="header-anchor" href="#使用electron-builder" aria-label="Permalink to &quot;使用electron-builder&quot;">​</a></h3><hr><h2 id="常见问题排查" tabindex="-1">常见问题排查 <a class="header-anchor" href="#常见问题排查" aria-label="Permalink to &quot;常见问题排查&quot;">​</a></h2><h3 id="_1-页面白屏" tabindex="-1">1. 页面白屏 <a class="header-anchor" href="#_1-页面白屏" aria-label="Permalink to &quot;1. 页面白屏&quot;">​</a></h3><ul><li>✅ 检查文件路径是否正确</li><li>✅ 开启开发者工具调试</li></ul><p>javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">webContents</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">openDevTools</span><span style="color:#BABED8;">()</span></span></code></pre></div><h3 id="_2-性能优化" tabindex="-1">2. 性能优化 <a class="header-anchor" href="#_2-性能优化" aria-label="Permalink to &quot;2. 性能优化&quot;">​</a></h3><p>javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 禁用GPU加速（低配设备）</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">disableHardwareAcceleration</span><span style="color:#BABED8;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 启用内存优化</span></span>
<span class="line"><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">webContents</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dom-ready</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">webContents</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setZoomFactor</span><span style="color:#F07178;">(</span><span style="color:#F78C6C;">1.0</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div></li></ul><h3 id="_2-electron-本地交互实现指南-文件读写篇" tabindex="-1">2.Electron 本地交互实现指南（文件读写篇） <a class="header-anchor" href="#_2-electron-本地交互实现指南-文件读写篇" aria-label="Permalink to &quot;2.Electron 本地交互实现指南（文件读写篇）&quot;">​</a></h3><p>Electron 通过主进程（Main Process）与渲染进程（Renderer Process）的分工协作实现本地系统交互。文件读写等敏感操作需通过主进程完成，渲染进程通过 IPC（进程间通信）机制与主进程交互。</p><hr><h4 id="一、核心实现原理" tabindex="-1">一、核心实现原理 <a class="header-anchor" href="#一、核心实现原理" aria-label="Permalink to &quot;一、核心实现原理&quot;">​</a></h4><h5 id="_1-进程分工" tabindex="-1">1. 进程分工 <a class="header-anchor" href="#_1-进程分工" aria-label="Permalink to &quot;1. 进程分工&quot;">​</a></h5><ul><li><strong>主进程</strong>：拥有完整 Node.js 环境，可直接使用 <code>fs</code> 模块操作文件系统</li><li><strong>渲染进程</strong>：运行在浏览器环境，需通过 IPC 向主进程发起文件操作请求</li></ul><h5 id="_2-ipc-通信机制" tabindex="-1">2. IPC 通信机制 <a class="header-anchor" href="#_2-ipc-通信机制" aria-label="Permalink to &quot;2. IPC 通信机制&quot;">​</a></h5><ul><li><strong>ipcMain</strong>：主进程监听器</li><li><strong>ipcRenderer</strong>：渲染进程触发器</li><li><strong>Context Bridge</strong>：安全暴露 API 的桥梁</li></ul><hr><h4 id="二、文件读写实现步骤" tabindex="-1">二、文件读写实现步骤 <a class="header-anchor" href="#二、文件读写实现步骤" aria-label="Permalink to &quot;二、文件读写实现步骤&quot;">​</a></h4><h5 id="_1-基础文件操作" tabindex="-1">1. 基础文件操作 <a class="header-anchor" href="#_1-基础文件操作" aria-label="Permalink to &quot;1. 基础文件操作&quot;">​</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 主进程（main.js）</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> fs </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">fs</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">read-file</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">fs</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">utf-8</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">err</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file-content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">data</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 渲染进程（preload.js）</span></span>
<span class="line"><span style="color:#BABED8;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electronAPI</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">readFile</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">read-file</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> path)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">onFileContent</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">callback</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file-content</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> callback)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h5 id="_2-文件对话框集成" tabindex="-1">2. 文件对话框集成 <a class="header-anchor" href="#_2-文件对话框集成" aria-label="Permalink to &quot;2. 文件对话框集成&quot;">​</a></h5><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 渲染进程调用文件选择器</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> dialog </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">remote</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">dialog</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">showOpenDialog</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">properties</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">openFile</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">filters</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">name</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Text</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">txt</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">] </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#BABED8;font-style:italic;">result</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#89DDFF;">!</span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">canceled</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">path</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">result</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">filePaths</span><span style="color:#F07178;">[</span><span style="color:#F78C6C;">0</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">electronAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">readFile</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">path</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h5 id="_3-实时文件监听" tabindex="-1">3. 实时文件监听 <a class="header-anchor" href="#_3-实时文件监听" aria-label="Permalink to &quot;3. 实时文件监听&quot;">​</a></h5><p>使用 <code>chokidar</code> 库实现目录监控：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 主进程</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> chokidar </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">chokidar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">watch-directory</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">path</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">watcher</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">chokidar</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">watch</span><span style="color:#F07178;">(</span><span style="color:#BABED8;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    persistent</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    ignoreInitial</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">watcher</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">all</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">eventType</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;font-style:italic;">filePath</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#BABED8;">event</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">sender</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">file-change</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> type</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">eventType</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> path</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">filePath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><hr><h4 id="三、安全配置要点" tabindex="-1">三、安全配置要点 <a class="header-anchor" href="#三、安全配置要点" aria-label="Permalink to &quot;三、安全配置要点&quot;">​</a></h4><ol><li><h5 id="预加载脚本配置" tabindex="-1"><strong>预加载脚本配置</strong>： <a class="header-anchor" href="#预加载脚本配置" aria-label="Permalink to &quot;**预加载脚本配置**：&quot;">​</a></h5></li></ol><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 创建 BrowserWindow 时配置</span></span>
<span class="line"><span style="color:#89DDFF;">new</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">webPreferences</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">nodeIntegration</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">false</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">contextIsolation</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">    </span><span style="color:#F07178;">preload</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">join</span><span style="color:#BABED8;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">preload.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span></span></code></pre></div><ol start="2"><li><strong>权限控制</strong>：</li></ol><ul><li>使用 <code>path.join()</code> 处理路径拼接</li><li>验证用户选择的文件路径</li><li>限制可访问目录范围</li></ul><hr><h4 id="四、扩展方案推荐" tabindex="-1">四、扩展方案推荐 <a class="header-anchor" href="#四、扩展方案推荐" aria-label="Permalink to &quot;四、扩展方案推荐&quot;">​</a></h4><table><thead><tr><th>方案类型</th><th>实现方式</th><th>适用场景</th></tr></thead><tbody><tr><td>原生存储</td><td><code>electron-store</code> 模块</td><td>应用配置存储</td></tr><tr><td>数据库方案</td><td>SQLite + <code>knex.js</code></td><td>结构化数据存储</td></tr><tr><td>自动化操作</td><td><code>fs-extra</code> 扩展库</td><td>复杂文件操作</td></tr><tr><td>二进制处理</td><td><code>Buffer</code> + <code>Stream</code> API</td><td>大文件分块处理</td></tr></tbody></table><hr><h4 id="五、最佳实践建议" tabindex="-1">五、最佳实践建议 <a class="header-anchor" href="#五、最佳实践建议" aria-label="Permalink to &quot;五、最佳实践建议&quot;">​</a></h4><ol><li><h5 id="遵循最小权限原则-渲染进程不应直接访问-fs-模块" tabindex="-1"><strong>遵循最小权限原则</strong>：渲染进程不应直接访问 <code>fs</code> 模块 <a class="header-anchor" href="#遵循最小权限原则-渲染进程不应直接访问-fs-模块" aria-label="Permalink to &quot;**遵循最小权限原则**：渲染进程不应直接访问 \`fs\` 模块&quot;">​</a></h5></li><li><h5 id="错误处理标准化-统一封装错误码和提示信息" tabindex="-1"><strong>错误处理标准化</strong>：统一封装错误码和提示信息 <a class="header-anchor" href="#错误处理标准化-统一封装错误码和提示信息" aria-label="Permalink to &quot;**错误处理标准化**：统一封装错误码和提示信息&quot;">​</a></h5></li><li><h5 id="性能优化-大文件操作使用流式处理" tabindex="-1"><strong>性能优化</strong>：大文件操作使用流式处理 <a class="header-anchor" href="#性能优化-大文件操作使用流式处理" aria-label="Permalink to &quot;**性能优化**：大文件操作使用流式处理&quot;">​</a></h5></li><li><h5 id="多进程通信-采用-invoke-handle-模式替代单向事件" tabindex="-1"><strong>多进程通信</strong>：采用 <code>invoke/handle</code> 模式替代单向事件 <a class="header-anchor" href="#多进程通信-采用-invoke-handle-模式替代单向事件" aria-label="Permalink to &quot;**多进程通信**：采用 \`invoke/handle\` 模式替代单向事件&quot;">​</a></h5></li></ol><p>通过合理运用 IPC 通信机制与 Node.js 原生模块，开发者可以构建安全高效的本地文件交互系统。建议结合官方文档与社区最佳实践进行深度定制。</p><h3 id="_3-electron-主进程与渲染进程的区别" tabindex="-1">3.Electron 主进程与渲染进程的区别 <a class="header-anchor" href="#_3-electron-主进程与渲染进程的区别" aria-label="Permalink to &quot;3.Electron 主进程与渲染进程的区别&quot;">​</a></h3><p>Electron 的主进程（Main Process）和渲染进程（Renderer Process）是其多进程架构的核心组成部分，两者的区别主要体现在以下方面：</p><hr><h4 id="_1-职责与功能" tabindex="-1">1. <strong>职责与功能</strong> <a class="header-anchor" href="#_1-职责与功能" aria-label="Permalink to &quot;1. **职责与功能**&quot;">​</a></h4><ul><li><p><strong>主进程</strong></p><ul><li><strong>唯一性</strong>：每个 Electron 应用有且仅有一个主进程。</li><li><strong>核心管理</strong>：负责应用的生命周期（启动、退出等）、创建/管理窗口（通过 <code>BrowserWindow</code>）、与操作系统交互（如文件系统、菜单栏、对话框等）。</li><li><strong>系统级操作</strong>：可以访问 Node.js 和 Electron 的所有 API，执行底层任务（如网络请求、加密数据操作）。</li></ul></li><li><p><strong>渲染进程</strong></p><ul><li><strong>多实例性</strong>：每个窗口对应一个独立的渲染进程。</li><li><strong>界面展示</strong>：负责渲染网页内容（HTML/CSS/JavaScript），处理用户交互（如按钮点击、表单输入）。</li><li><strong>限制性</strong>：默认无法直接访问 Node.js API（需通过预加载脚本或配置 <code>nodeIntegration</code>）。</li></ul></li></ul><hr><h4 id="_2-运行环境" tabindex="-1">2. <strong>运行环境</strong> <a class="header-anchor" href="#_2-运行环境" aria-label="Permalink to &quot;2. **运行环境**&quot;">​</a></h4><ul><li><p><strong>主进程</strong></p><ul><li>运行在 <strong>Node.js 环境</strong>中，支持所有 Node.js 模块（如 <code>fs</code>、<code>path</code>）。</li><li>可以通过 <code>ipcMain</code> 模块监听来自渲染进程的消息。</li></ul></li><li><p><strong>渲染进程</strong></p><ul><li>运行在 <strong>Chromium 浏览器环境</strong>中，支持 Web API（如 DOM 操作、Fetch API）。</li><li>通过 <code>ipcRenderer</code> 模块向主进程发送消息。</li></ul></li></ul><hr><h4 id="_3-通信机制" tabindex="-1">3. <strong>通信机制</strong> <a class="header-anchor" href="#_3-通信机制" aria-label="Permalink to &quot;3. **通信机制**&quot;">​</a></h4><ul><li><strong>进程间通信（IPC）</strong><ul><li><strong>主进程 → 渲染进程</strong>：通过 <code>BrowserWindow.webContents.send()</code> 发送消息。</li><li><strong>渲染进程 → 主进程</strong>：通过 <code>ipcRenderer.send()</code> 发送消息，主进程通过 <code>ipcMain.on()</code> 监听。</li><li><strong>预加载脚本（Preload Script）</strong>：在渲染进程中桥接 Node.js 功能，通过 <code>contextBridge.exposeInMainWorld()</code> 安全暴露 API。</li></ul></li></ul><hr><h4 id="_4-安全性与隔离" tabindex="-1">4. <strong>安全性与隔离</strong> <a class="header-anchor" href="#_4-安全性与隔离" aria-label="Permalink to &quot;4. **安全性与隔离**&quot;">​</a></h4><ul><li><p><strong>主进程</strong></p><ul><li>可执行敏感操作（如文件读写、系统命令），需避免直接暴露给用户界面。</li></ul></li><li><p><strong>渲染进程</strong></p><ul><li>默认启用 <strong>上下文隔离（Context Isolation）</strong>，防止渲染进程直接访问 Node.js 全局对象。</li><li>通过预加载脚本限制可访问的 API，避免安全漏洞。</li></ul></li></ul><hr><h4 id="_5-典型应用场景" tabindex="-1">5. <strong>典型应用场景</strong> <a class="header-anchor" href="#_5-典型应用场景" aria-label="Permalink to &quot;5. **典型应用场景**&quot;">​</a></h4><ul><li><p><strong>主进程</strong></p><ul><li><p>创建窗口、注册全局快捷键、处理系统托盘图标。</p></li><li><p>示例代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> app</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> BrowserWindow </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#82AAFF;">require</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electron</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#BABED8;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">whenReady</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">win</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">BrowserWindow</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> width</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">800</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> height</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">600</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">loadFile</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">index.html</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul></li><li><p><strong>渲染进程</strong></p><ul><li><p>实现动态 UI 效果、响应用户输入、调用主进程功能。</p></li><li><p>示例代码：</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 预加载脚本中暴露 API</span></span>
<span class="line"><span style="color:#BABED8;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electronAPI</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">openFile</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">invoke</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dialog:openFile</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul></li></ul><hr><h4 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h4><p>主进程是 Electron 应用的“大脑”，负责全局管理和系统交互；渲染进程则是“界面引擎”，专注用户交互和内容展示。两者通过 IPC 实现松耦合通信，同时通过安全机制（如预加载脚本）平衡功能与安全性。</p><h3 id="_4-electron-进程间通信与更新机制详解" tabindex="-1">4.Electron 进程间通信与更新机制详解 <a class="header-anchor" href="#_4-electron-进程间通信与更新机制详解" aria-label="Permalink to &quot;4.Electron 进程间通信与更新机制详解&quot;">​</a></h3><h4 id="一、electron-进程间通信-ipc" tabindex="-1">一、Electron 进程间通信（IPC） <a class="header-anchor" href="#一、electron-进程间通信-ipc" aria-label="Permalink to &quot;一、Electron 进程间通信（IPC）&quot;">​</a></h4><h4 id="_1-基础通信模块" tabindex="-1">1. 基础通信模块 <a class="header-anchor" href="#_1-基础通信模块" aria-label="Permalink to &quot;1. 基础通信模块&quot;">​</a></h4><p>Electron 通过 <code>ipcMain</code>（主进程）和 <code>ipcRenderer</code>（渲染进程）模块实现进程间通信，支持单向和双向消息传递。</p><h4 id="_1-渲染进程-→-主进程" tabindex="-1">（1）渲染进程 → 主进程 <a class="header-anchor" href="#_1-渲染进程-→-主进程" aria-label="Permalink to &quot;（1）渲染进程 → 主进程&quot;">​</a></h4><ul><li><p><strong>单向通信</strong></p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 渲染进程（使用预加载脚本）</span></span>
<span class="line"><span style="color:#BABED8;">contextBridge</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">exposeInMainWorld</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">electronAPI</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#82AAFF;">sendMessage</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">msg-channel</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> message)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主进程</span></span>
<span class="line"><span style="color:#BABED8;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">msg-channel</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">message</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Received:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">message</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li><li><p>双向通信使用</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ipcRenderer.invoke</span></span></code></pre></div><p>与</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">ipcMain.handle</span></span></code></pre></div><p>实现异步请求-响应模式javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 渲染进程</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#BABED8;"> result </span><span style="color:#89DDFF;">=</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#BABED8;"> window</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">electronAPI</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getData</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 主进程</span></span>
<span class="line"><span style="color:#BABED8;">ipcMain</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">handle</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">get-data</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">async</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">()</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetchDataFromDB</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div></li></ul><h4 id="_2-主进程-→-渲染进程" tabindex="-1">（2）主进程 → 渲染进程 <a class="header-anchor" href="#_2-主进程-→-渲染进程" aria-label="Permalink to &quot;（2）主进程 → 渲染进程&quot;">​</a></h4><p>通过 <code>webContents.send</code> 主动推送消息：</p><p>javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 主进程</span></span>
<span class="line"><span style="color:#BABED8;">win</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">webContents</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">send</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update-notify</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span><span style="color:#BABED8;"> </span><span style="color:#F07178;">status</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ready</span><span style="color:#89DDFF;">&#39;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// 渲染进程</span></span>
<span class="line"><span style="color:#BABED8;">ipcRenderer</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">on</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">update-notify</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">(</span><span style="color:#BABED8;font-style:italic;">event</span><span style="color:#89DDFF;">,</span><span style="color:#BABED8;"> </span><span style="color:#BABED8;font-style:italic;">data</span><span style="color:#89DDFF;">)</span><span style="color:#BABED8;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#BABED8;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Update:</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#BABED8;">data</span><span style="color:#89DDFF;">.</span><span style="color:#BABED8;">status</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="_2-高级通信场景" tabindex="-1">2. 高级通信场景 <a class="header-anchor" href="#_2-高级通信场景" aria-label="Permalink to &quot;2. 高级通信场景&quot;">​</a></h4><ul><li><p>上下文隔离：通过预加载脚本（Preload）使用</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">contextBridge</span></span></code></pre></div><p>安全暴露 API，避免直接暴露 Node.js 能力到渲染进程</p></li><li><p><strong>多窗口通信</strong>：主进程作为中介，转发不同渲染进程的消息。</p></li></ul><hr><h3 id="_5-electron-应用更新机制" tabindex="-1">5.Electron 应用更新机制 <a class="header-anchor" href="#_5-electron-应用更新机制" aria-label="Permalink to &quot;5.Electron 应用更新机制&quot;">​</a></h3><h5 id="_1-使用-electron-updater-实现自动化更新" tabindex="-1">1. 使用 <code>electron-updater</code> 实现自动化更新 <a class="header-anchor" href="#_1-使用-electron-updater-实现自动化更新" aria-label="Permalink to &quot;1. 使用 \`electron-updater\` 实现自动化更新&quot;">​</a></h5><h6 id="_1-核心流程" tabindex="-1">（1）核心流程 <a class="header-anchor" href="#_1-核心流程" aria-label="Permalink to &quot;（1）核心流程&quot;">​</a></h6><ol><li><p>检查更新：应用启动时请求更新服务器，比对版本号（如</p><div class="language-"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#babed8;">semver库</span></span></code></pre></div></li><li><p>下载更新：支持全量更新（完整安装包）和增量更新（基于内容分块的差异下载）</p></li><li><p><strong>应用更新</strong>：静默安装并重启应用。</p></li></ol><h6 id="_2-配置示例" tabindex="-1">（2）配置示例 <a class="header-anchor" href="#_2-配置示例" aria-label="Permalink to &quot;（2）配置示例&quot;">​</a></h6><p>javascript</p><div class="language-javascript"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// 主进程配置</span></span>
<span class="line"><span style="color:#BABED8;">autoUpdater</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setFeedURL</span><span style="color:#BABED8;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">provider</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">github</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">repo</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-app</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#BABED8;">  </span><span style="color:#F07178;">owner</span><span style="color:#89DDFF;">:</span><span style="color:#BABED8;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">user</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#BABED8;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#BABED8;">autoUpdater</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">checkForUpdatesAndNotify</span><span style="color:#BABED8;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h6 id="_3-高级特性" tabindex="-1">（3）高级特性 <a class="header-anchor" href="#_3-高级特性" aria-label="Permalink to &quot;（3）高级特性&quot;">​</a></h6><ul><li>灰度发布：通过 GUID 哈希控制部分用户优先更新。</li><li>安全验证：使用 SHA512 校验文件完整性，HTTPS 加密传输。</li><li>错误处理：网络重试、回滚机制、日志记录（如 Winston 库）</li></ul><h5 id="_2-更新策略优化" tabindex="-1">2. 更新策略优化 <a class="header-anchor" href="#_2-更新策略优化" aria-label="Permalink to &quot;2. 更新策略优化&quot;">​</a></h5><ul><li>增量更新：利用blockmap文件识别差异块，减少下载量（如 CDC 分块算法）。</li><li><strong>CDN 加速</strong>：将更新文件托管到云存储（如 AWS S3、阿里云 OSS）。</li><li>CI/CD 集成：通过 GitHub Actions 或 Jenkins 实现自动构建和发布</li></ul><hr><h5 id="_3-总结" tabindex="-1">3.总结 <a class="header-anchor" href="#_3-总结" aria-label="Permalink to &quot;3.总结&quot;">​</a></h5><table><thead><tr><th style="text-align:center;">模块</th><th style="text-align:center;">关键点</th></tr></thead><tbody><tr><td style="text-align:center;"><strong>IPC 通信</strong></td><td style="text-align:center;">使用 <code>ipcMain</code>/<code>ipcRenderer</code>，区分单向/双向通信，优先采用上下文隔离</td></tr><tr><td style="text-align:center;"><strong>自动更新</strong></td><td style="text-align:center;">依赖 <code>electron-updater</code>，支持全量/增量更新，需处理错误和安全性</td></tr><tr><td style="text-align:center;"><strong>性能优化</strong></td><td style="text-align:center;">增量更新减少带宽消耗，并行下载提升速度</td></tr><tr><td style="text-align:center;"><strong>安全实践</strong></td><td style="text-align:center;">校验文件哈希，HTTPS 加密，避免降级攻击</td></tr></tbody></table>`,80)]))}const d=a(p,[["render",e]]);export{i as __pageData,d as default};
